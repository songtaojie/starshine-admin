// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Starshine.Admin.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Starshine.Admin.Migrations
{
    [DbContext(typeof(StarshineAdminDbContext))]
    [Migration("20250322140345_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.Sqlite)
                .HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("application_name");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("browser_info");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_ip_address");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_name");

                    b.Property<string>("Comments")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("comments");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Exceptions")
                        .HasColumnType("TEXT")
                        .HasColumnName("exceptions");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("execution_duration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("execution_time");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("http_method");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("http_status_code");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("impersonator_tenant_id");

                    b.Property<string>("ImpersonatorTenantName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("impersonator_tenant_name");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("impersonator_user_id");

                    b.Property<string>("ImpersonatorUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("impersonator_user_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_abp_audit_log");

                    b.HasIndex("TenantId", "ExecutionTime")
                        .HasDatabaseName("ix_abp_audit_log_tenant_id_execution_time");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime")
                        .HasDatabaseName("ix_abp_audit_log_tenant_id_user_id_execution_time");

                    b.ToTable("abp_audit_log", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("TEXT")
                        .HasColumnName("audit_log_id");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("execution_duration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("execution_time");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("MethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("method_name");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("parameters");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("service_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_audit_log_action");

                    b.HasIndex("AuditLogId")
                        .HasDatabaseName("ix_abp_audit_log_action_audit_log_id");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime")
                        .HasDatabaseName("ix_abp_audit_log_action_tenant_id_service_name_method_name_execution_time");

                    b.ToTable("abp_audit_log_action", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("TEXT")
                        .HasColumnName("audit_log_id");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("change_time");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_type");

                    b.Property<string>("EntityId")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("entity_id");

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("entity_tenant_id");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("entity_type_full_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_entity_change");

                    b.HasIndex("AuditLogId")
                        .HasDatabaseName("ix_abp_entity_change_audit_log_id");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId")
                        .HasDatabaseName("ix_abp_entity_change_tenant_id_entity_type_full_name_entity_id");

                    b.ToTable("abp_entity_change", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("entity_change_id");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("new_value");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("original_value");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("property_name");

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("property_type_full_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_entity_property_change");

                    b.HasIndex("EntityChangeId")
                        .HasDatabaseName("ix_abp_entity_property_change_entity_change_id");

                    b.ToTable("abp_entity_property_change", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsAbandoned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_abandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("TEXT")
                        .HasColumnName("job_args");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("job_name");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_try_time");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("next_try_time");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((byte)15)
                        .HasColumnName("priority");

                    b.Property<short>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((short)0)
                        .HasColumnName("try_count");

                    b.HasKey("Id")
                        .HasName("pk_abp_background_job_record");

                    b.HasIndex("IsAbandoned", "NextTryTime")
                        .HasDatabaseName("ix_abp_background_job_record_is_abandoned_next_try_time");

                    b.ToTable("abp_background_job_record", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AllowedProviders")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_providers");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("group_name");

                    b.Property<bool>("IsAvailableToHost")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_available_to_host");

                    b.Property<bool>("IsVisibleToClients")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_visible_to_clients");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ParentName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_name");

                    b.Property<string>("ValueType")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("value_type");

                    b.HasKey("Id")
                        .HasName("pk_abp_feature_definition_record");

                    b.HasIndex("GroupName")
                        .HasDatabaseName("ix_abp_feature_definition_record_group_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_feature_definition_record_name");

                    b.ToTable("abp_feature_definition_record", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_abp_feature_group_definition_record");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_feature_group_definition_record_name");

                    b.ToTable("abp_feature_group_definition_record", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_abp_feature_value");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_feature_value_name_provider_name_provider_key");

                    b.ToTable("abp_feature_value", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_static");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Regex")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("regex");

                    b.Property<string>("RegexDescription")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("regex_description");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER")
                        .HasColumnName("required");

                    b.Property<int>("ValueType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("value_type");

                    b.HasKey("Id")
                        .HasName("pk_abp_claim_type");

                    b.ToTable("abp_claim_type", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("SourceTenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("source_tenant_id");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("source_user_id");

                    b.Property<Guid?>("TargetTenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("target_tenant_id");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("target_user_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_link_user");

                    b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_link_user_source_user_id_source_tenant_id_target_user_id_target_tenant_id");

                    b.ToTable("abp_link_user", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_public");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_static");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_role");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("ix_abp_role_normalized_name");

                    b.ToTable("abp_role", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<Guid?>("IdentityRoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_role_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_role_claim");

                    b.HasIndex("IdentityRoleId")
                        .HasDatabaseName("ix_abp_role_claim_identity_role_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_abp_role_claim_role_id");

                    b.ToTable("abp_role_claim", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("application_name");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("browser_info");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_ip_address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("correlation_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("Identity")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("identity");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_name");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_abp_security_log");

                    b.HasIndex("TenantId", "Action")
                        .HasDatabaseName("ix_abp_security_log_tenant_id_action");

                    b.HasIndex("TenantId", "ApplicationName")
                        .HasDatabaseName("ix_abp_security_log_tenant_id_application_name");

                    b.HasIndex("TenantId", "Identity")
                        .HasDatabaseName("ix_abp_security_log_tenant_id_identity");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("ix_abp_security_log_tenant_id_user_id");

                    b.ToTable("abp_security_log", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("device");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddresses")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_addresses");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_accessed");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("SignedIn")
                        .HasColumnType("TEXT")
                        .HasColumnName("signed_in");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_session");

                    b.HasIndex("Device")
                        .HasDatabaseName("ix_abp_session_device");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_abp_session_session_id");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("ix_abp_session_tenant_id_user_id");

                    b.ToTable("abp_session", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsExternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_external");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_password_change_time");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("should_change_password_on_next_login");

                    b.Property<string>("Surname")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_abp_user");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_abp_user_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("ix_abp_user_normalized_email");

                    b.HasIndex("NormalizedUserName")
                        .HasDatabaseName("ix_abp_user_normalized_user_name");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_abp_user_user_name");

                    b.ToTable("abp_user", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_user_claim");

                    b.HasIndex("IdentityUserId")
                        .HasDatabaseName("ix_abp_user_claim_identity_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_abp_user_claim_user_id");

                    b.ToTable("abp_user_claim", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("source_user_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("target_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_user_delegation");

                    b.ToTable("abp_user_delegation", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_user_id");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(196)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId", "LoginProvider")
                        .HasName("pk_abp_user_login");

                    b.HasIndex("IdentityUserId")
                        .HasDatabaseName("ix_abp_user_login_identity_user_id");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .HasDatabaseName("ix_abp_user_login_login_provider_provider_key");

                    b.ToTable("abp_user_login", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_unit_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("OrganizationUnitId", "UserId")
                        .HasName("pk_abp_user_organization_unit");

                    b.HasIndex("IdentityUserId")
                        .HasDatabaseName("ix_abp_user_organization_unit_identity_user_id");

                    b.HasIndex("UserId", "OrganizationUnitId")
                        .HasDatabaseName("ix_abp_user_organization_unit_user_id_organization_unit_id");

                    b.ToTable("abp_user_organization_unit", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_abp_user_role");

                    b.HasIndex("IdentityUserId")
                        .HasDatabaseName("ix_abp_user_role_identity_user_id");

                    b.HasIndex("RoleId", "UserId")
                        .HasDatabaseName("ix_abp_user_role_role_id_user_id");

                    b.ToTable("abp_user_role", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_abp_user_token");

                    b.HasIndex("IdentityUserId")
                        .HasDatabaseName("ix_abp_user_token_identity_user_id");

                    b.ToTable("abp_user_token", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_organization_unit");

                    b.HasIndex("Code")
                        .HasDatabaseName("ix_abp_organization_unit_code");

                    b.ToTable("abp_organization_unit", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_unit_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("OrganizationUnitId", "RoleId")
                        .HasName("pk_abp_organization_unit_role");

                    b.HasIndex("RoleId", "OrganizationUnitId")
                        .HasDatabaseName("ix_abp_organization_unit_role_role_id_organization_unit_id");

                    b.ToTable("abp_organization_unit_role", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("application_type");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_secret");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_type");

                    b.Property<string>("ClientUri")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_uri");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("consent_type");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("TEXT")
                        .HasColumnName("display_names");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("TEXT")
                        .HasColumnName("json_web_key_set");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("LogoUri")
                        .HasColumnType("TEXT")
                        .HasColumnName("logo_uri");

                    b.Property<string>("Permissions")
                        .HasColumnType("TEXT")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("TEXT")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("TEXT")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Requirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("requirements");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pk_abp_application");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_application_client_id");

                    b.ToTable("abp_application", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("application_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("TEXT")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_abp_authorization");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_abp_authorization_application_id_status_subject_type");

                    b.ToTable("abp_authorization", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("TEXT")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("TEXT")
                        .HasColumnName("display_names");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("TEXT")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pk_abp_scope");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_scope_name");

                    b.ToTable("abp_scope", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("application_id");

                    b.Property<Guid?>("AuthorizationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("authorization_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Payload")
                        .HasColumnType("TEXT")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("redemption_date");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("reference_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_abp_token");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_token_reference_id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_abp_token_application_id_status_subject_type");

                    b.ToTable("abp_token", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("group_name");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_enabled");

                    b.Property<byte>("MultiTenancySide")
                        .HasColumnType("INTEGER")
                        .HasColumnName("multi_tenancy_side");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ParentName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_name");

                    b.Property<string>("Providers")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("providers");

                    b.Property<string>("StateCheckers")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("state_checkers");

                    b.HasKey("Id")
                        .HasName("pk_abp_permission_definition_record");

                    b.HasIndex("GroupName")
                        .HasDatabaseName("ix_abp_permission_definition_record_group_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_permission_definition_record_name");

                    b.ToTable("abp_permission_definition_record", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_permission_grant");

                    b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_permission_grant_tenant_id_name_provider_name_provider_key");

                    b.ToTable("abp_permission_grant", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_abp_permission_group_definition_record");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_permission_group_definition_record_name");

                    b.ToTable("abp_permission_group_definition_record", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_abp_setting");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_setting_name_provider_name_provider_key");

                    b.ToTable("abp_setting", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_encrypted");

                    b.Property<bool>("IsInherited")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_inherited");

                    b.Property<bool>("IsVisibleToClients")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_visible_to_clients");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Providers")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("providers");

                    b.HasKey("Id")
                        .HasName("pk_abp_setting_definition_record");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_setting_definition_record_name");

                    b.ToTable("abp_setting_definition_record", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleter_id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletion_time");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extra_properties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_abp_tenant");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_abp_tenant_name");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("ix_abp_tenant_normalized_name");

                    b.ToTable("abp_tenant", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("TenantId", "Name")
                        .HasName("pk_abp_tenant_connection_string");

                    b.ToTable("abp_tenant_connection_string", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_audit_log_action_abp_audit_log_audit_log_id");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_entity_change_abp_audit_log_audit_log_id");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_entity_property_change_abp_entity_change_entity_change_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("IdentityRoleId")
                        .HasConstraintName("fk_abp_role_claim_abp_role_identity_role_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("IdentityUserId")
                        .HasConstraintName("fk_abp_user_claim_abp_user_identity_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("IdentityUserId")
                        .HasConstraintName("fk_abp_user_login_abp_user_identity_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("IdentityUserId")
                        .HasConstraintName("fk_abp_user_organization_unit_abp_user_identity_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("IdentityUserId")
                        .HasConstraintName("fk_abp_user_role_abp_user_identity_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("IdentityUserId")
                        .HasConstraintName("fk_abp_user_token_abp_user_identity_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_organization_unit_role_abp_organization_unit_organization_unit_id");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_tenant_connection_string_abp_tenant_tenant_id");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("OrganizationUnits");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Navigation("ConnectionStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
